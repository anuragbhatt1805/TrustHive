name: Release and Version

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: release
  cancel-in-progress: false

permissions:
  contents: write
  packages: write
  pull-requests: write
  issues: write

env:
  NODE_VERSION: '18'
  DATABASE_URL: "postgresql://postgres:12345678@localhost:5432/trusthive_ci"

jobs:
  version:
    name: Version and Release
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'chore(release):')"
    
    outputs:
      version-updated: ${{ steps.version-check.outputs.version-updated }}
      services-matrix: ${{ steps.detect-services.outputs.services-matrix }}
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: 12345678
          POSTGRES_USER: postgres
          POSTGRES_DB: trusthive_ci
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.NPM_TOKEN }}
          persist-credentials: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Generate Prisma Client
        run: |
          cd common/prisma
          npx prisma generate
          npx prisma db push

      - name: Check for changes
        id: version-check
        run: |
          CHANGED=$(yarn lerna:changed --loglevel silent | wc -l)
          echo "Changed packages: $CHANGED"
          if [ $CHANGED -gt 0 ]; then
            echo "version-updated=true" >> $GITHUB_OUTPUT
            echo "üì¶ Changes detected - will version packages"
          else
            echo "version-updated=false" >> $GITHUB_OUTPUT
            echo "‚ú® No changes detected - skipping versioning"
          fi

      - name: Version packages
        if: steps.version-check.outputs.version-updated == 'true'
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "üöÄ Running Lerna versioning..."
          yarn lerna:version-ci

      - name: Detect services for matrix build
        id: detect-services
        run: |
          echo "üîç Detecting services for matrix build..."
          
          # Find all services (directories with package.json that are not in common/ or root)
          SERVICES=$(find . -name "package.json" -not -path "./node_modules/*" -not -path "./common/*" -not -path "./package.json" | while read pkg; do
            DIR=$(dirname "$pkg")
            PKG_NAME=$(node -p "require('$pkg').name" 2>/dev/null || echo "")
            PKG_PRIVATE=$(node -p "require('$pkg').private" 2>/dev/null || echo "false")
            
            # Only include services that are actual deployable services (not libraries)
            if [ -n "$PKG_NAME" ] && [ "$PKG_NAME" != "trusthive" ] && [ "$PKG_PRIVATE" != "true" ]; then
              # Determine service type based on project structure and dependencies
              if [ -f "$DIR/Dockerfile" ]; then
                SERVICE_TYPE="docker"
              elif grep -q "archiver" "$pkg" 2>/dev/null || grep -q "aws-lambda" "$pkg" 2>/dev/null; then
                SERVICE_TYPE="lambda"
              elif [ -f "$DIR/serverless.yml" ] || [ -f "$DIR/serverless.yaml" ]; then
                SERVICE_TYPE="serverless"
              else
                SERVICE_TYPE="library"
              fi
              
              # Extract service category from path (e.g., 'auth' from 'auth/service')
              CATEGORY=$(echo "$DIR" | cut -d'/' -f2)
              SERVICE_NAME=$(echo "$PKG_NAME" | sed 's/@trusthive\///')
              
              echo "{\"name\":\"$PKG_NAME\",\"path\":\"$DIR\",\"type\":\"$SERVICE_TYPE\",\"category\":\"$CATEGORY\",\"service_name\":\"$SERVICE_NAME\"}"
            fi
          done | jq -s .)
          
          echo "Detected services:"
          echo "$SERVICES" | jq .
          
          # Output for matrix - properly escape the JSON
          echo "services-matrix<<EOF" >> $GITHUB_OUTPUT
          echo "$SERVICES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Build packages
        if: steps.version-check.outputs.version-updated == 'true'
        run: yarn build

      - name: Create and push release commit
        if: steps.version-check.outputs.version-updated == 'true'
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          # Get all service versions for commit message dynamically
          SERVICE_VERSIONS=""
          find . -name "package.json" -not -path "./node_modules/*" -not -path "./common/*" -not -path "./package.json" | while read pkg; do
            PKG_NAME=$(node -p "require('$pkg').name" 2>/dev/null || echo "")
            PKG_VERSION=$(node -p "require('$pkg').version" 2>/dev/null || echo "")
            if [ -n "$PKG_NAME" ] && [ "$PKG_NAME" != "trusthive" ] && [ -n "$PKG_VERSION" ]; then
              echo "- ${PKG_NAME}@${PKG_VERSION}" >> /tmp/service_versions.txt
            fi
          done
          
          if [ -f "/tmp/service_versions.txt" ]; then
            SERVICE_VERSIONS=$(cat /tmp/service_versions.txt)
          fi
          
          # Check if there are changes to commit
          if git diff --quiet && git diff --cached --quiet; then
            echo "No changes to commit"
          else
            # Add all changes
            git add .
            
            # Create release commit
            git commit -m "chore(release): publish packages [skip ci]
            
            $SERVICE_VERSIONS
            
            Auto-generated by GitHub Actions"
          fi
          
          # Create tags for all services
          find . -name "package.json" -not -path "./node_modules/*" -not -path "./common/*" -not -path "./package.json" | while read pkg; do
            DIR=$(dirname "$pkg")
            PKG_NAME=$(node -p "require('$pkg').name" 2>/dev/null || echo "")
            PKG_VERSION=$(node -p "require('$pkg').version" 2>/dev/null || echo "")
            if [ -n "$PKG_NAME" ] && [ "$PKG_NAME" != "trusthive" ] && [ -n "$PKG_VERSION" ]; then
              SERVICE_NAME=$(echo "$PKG_NAME" | sed 's/@trusthive\///')
              git tag -a "${SERVICE_NAME}@${PKG_VERSION}" -m "${SERVICE_NAME} v${PKG_VERSION}" || true
            fi
          done
          
          # Configure remote with token and push
          REPO_URL="https://x-access-token:${NPM_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          git remote set-url origin "$REPO_URL"
          
          echo "üöÄ Pushing release commit and tags..."
          git push origin main
          git push origin --tags

  publish-packages:
    name: Publish Common Packages
    runs-on: ubuntu-latest
    needs: version
    if: needs.version.outputs.version-updated == 'true'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: 12345678
          POSTGRES_USER: postgres
          POSTGRES_DB: trusthive_ci
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          token: ${{ secrets.NPM_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Generate Prisma Client
        run: |
          cd common/prisma
          npx prisma generate
          npx prisma db push

      - name: Build packages
        run: yarn build

      - name: Publish common packages
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "üì¶ Publishing common packages to GitHub Package Registry..."
          
          CURRENT_DIR=$(pwd)
          
          # Find and publish all common packages (exclude generated directories)
          find common -name "package.json" -type f -not -path "*/generated/*" -not -path "*/node_modules/*" | while read pkg; do
            DIR=$(dirname "$pkg")
            FULL_PKG_PATH="$CURRENT_DIR/$pkg"
            
            # Get package info using absolute path
            PKG_NAME=$(node -e "try { console.log(require('$FULL_PKG_PATH').name); } catch(e) { console.log(''); }")
            PKG_VERSION=$(node -e "try { console.log(require('$FULL_PKG_PATH').version); } catch(e) { console.log(''); }")
            
            if [ -n "$PKG_NAME" ] && [ "$PKG_NAME" != "trusthive" ] && [[ "$PKG_NAME" == @trusthive/* ]]; then
              echo "Publishing $PKG_NAME@$PKG_VERSION from $DIR..."
              
              # Change to package directory
              cd "$CURRENT_DIR/$DIR"
              
              if [ -f "publish.sh" ]; then
                chmod +x publish.sh
                ./publish.sh || echo "‚ö†Ô∏è Package $PKG_NAME publish failed or already exists"
              else
                # Fallback: publish directly with npm
                echo "@trusthive:registry=https://npm.pkg.github.com" > .npmrc
                echo "//npm.pkg.github.com/:_authToken=$NPM_TOKEN" >> .npmrc
                npm publish --registry=https://npm.pkg.github.com || echo "‚ö†Ô∏è Package $PKG_NAME publish failed or already exists"
                rm -f .npmrc
              fi
              
              # Return to original directory
              cd "$CURRENT_DIR"
            else
              echo "Skipping $PKG_NAME (not a TrustHive package or empty)"
            fi
          done
          
          echo "‚úÖ Common packages published"

  build-services:
    name: Build Services
    runs-on: ubuntu-latest
    needs: [version, publish-packages]
    if: needs.version.outputs.version-updated == 'true'
    strategy:
      matrix:
        service: ${{ fromJson(needs.version.outputs.services-matrix) }}
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          token: ${{ secrets.NPM_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Configure NPM for GitHub Package Registry
        run: |
          echo "@trusthive:registry=https://npm.pkg.github.com" >> ~/.npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc

      - name: Wait for packages to be available
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "üïê Waiting for packages to be available in GitHub Package Registry..."
          
          # List of packages to check
          PACKAGES="@trusthive/interface-types @trusthive/prisma-config"
          
          for package in $PACKAGES; do
            echo "Checking availability of $package..."
            for i in {1..20}; do
              if npm view $package --registry=https://npm.pkg.github.com >/dev/null 2>&1; then
                echo "‚úÖ Package $package is available"
                break
              else
                if [ $i -eq 20 ]; then
                  echo "‚ùå Package $package not available after 10 minutes, continuing anyway..."
                else
                  echo "‚è≥ Package $package not yet available (attempt $i/20), waiting 30s..."
                  sleep 30
                fi
              fi
            done
          done
          
          echo "‚úÖ Package availability check complete"

      - name: Install dependencies and build
        run: |
          yarn install --frozen-lockfile
          yarn build

      - name: Build Docker Image
        if: matrix.service.type == 'docker'
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: matrix.service.type == 'docker'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get service version
        id: get-version
        run: |
          SERVICE_VERSION=$(node -p "require('${{ matrix.service.path }}/package.json').version")
          SERVICE_NAME=$(echo "${{ matrix.service.name }}" | sed 's/@trusthive\///')
          echo "version=$SERVICE_VERSION" >> $GITHUB_OUTPUT
          echo "service-name=$SERVICE_NAME" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        if: matrix.service.type == 'docker'
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.path }}
          file: ${{ matrix.service.path }}/Dockerfile
          push: true
          build-args: |
            NPM_TOKEN=${{ secrets.NPM_TOKEN }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/trusthive-${{ steps.get-version.outputs.service-name }}:latest
            ghcr.io/${{ github.repository_owner }}/trusthive-${{ steps.get-version.outputs.service-name }}:v${{ steps.get-version.outputs.version }}
          labels: |
            org.opencontainers.image.title=TrustHive ${{ steps.get-version.outputs.service-name }}
            org.opencontainers.image.description=${{ matrix.service.name }} for TrustHive banking platform
            org.opencontainers.image.version=v${{ steps.get-version.outputs.version }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Upload Lambda artifact
        if: matrix.service.type == 'lambda'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.get-version.outputs.service-name }}-v${{ steps.get-version.outputs.version }}
          path: ${{ matrix.service.path }}/build/*.zip
          retention-days: 7

      - name: Generate service summary
        run: |
          echo "## üéØ ${{ matrix.service.name }} v${{ steps.get-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: ${{ matrix.service.type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Path**: ${{ matrix.service.path }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ matrix.service.type }}" = "docker" ]; then
            echo "- **Docker Image**: \`ghcr.io/${{ github.repository_owner }}/trusthive-${{ steps.get-version.outputs.service-name }}:v${{ steps.get-version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ matrix.service.type }}" = "lambda" ]; then
            echo "- **Lambda Artifact**: ${{ steps.get-version.outputs.service-name }}-v${{ steps.get-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
